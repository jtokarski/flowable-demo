/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 * For more detailed information on multi-project builds, please refer to https://docs.gradle.org/8.13/userguide/multi_project_builds.html in the Gradle documentation.
 */
import org.gradle.api.initialization.resolve.RepositoriesMode

dependencyResolutionManagement {

    repositories {
        mavenCentral()
        maven {
            url = uri('https://maven.pkg.github.com/jtokarski/easy-go-accounting')
            credentials {
                //
                // settings.ext.find() takes properties from ~/.gradle/gradle.properties
                // which is the most sensible place for storing credentials
                //
                username = settings.ext.find('gitHubPackagesReadUsername')
                password = settings.ext.find('gitHubPackagesReadPassword')
            }
        }
    }
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)

    versionCatalogs {
        libs {
            version('springBootVersion', '3.5.0')
            version('springDependencyManagementPluginVersion', '1.1.7')
            version('springFrameworkBomVersion', '6.2.6')
            version('springCloudVersion', '2025.0.0')
            version('junitBomVersion', '5.12.2')
            version('flowableBomVersion', '7.1.0')
            version('testcontainersBomVersion', '1.21.0')
            version('assertjVersion', '3.27.3')
            version('apacheCommonsLang3Version', '3.17.0')
            version('apacheCommonsCollections4Version', '4.5.0')
            version('log4j2Version', '2.24.3')
            version('flywaydbVersion', '11.8.1')
            version('hikariCpVersion', '6.3.0')
            version('postgresqlVersion', '42.7.5')
            version('h2Version', '2.3.232')
            version('defendevCommonJdkVersion', '0.0.12')
            version('auth0JavaJwtVersion', '4.5.0')

            /*
             * Note that 'org.springframework.boot:spring-boot-dependencies:3.5.0' does include
             *   <assertj.version>3.27.3</assertj.version>
             * so use versionRef defined here only when not using Spring Boot Dependencies.
             */
            library('assertj', 'org.assertj', 'assertj-core').versionRef('assertjVersion')
            library('apacheCommonsLang3', 'org.apache.commons', 'commons-lang3')
                .versionRef('apacheCommonsLang3Version')
            library('apacheCommonsCollections4', 'org.apache.commons', 'commons-collections4')
                .versionRef('apacheCommonsCollections4Version')
            library('log4j2Api', 'org.apache.logging.log4j', 'log4j-api').versionRef('log4j2Version')
            library('log4j2Core', 'org.apache.logging.log4j', 'log4j-core').versionRef('log4j2Version')
            library('log4j2Slf4j2Impl', 'org.apache.logging.log4j', 'log4j-slf4j2-impl').versionRef('log4j2Version')
            library('flywaydb', 'org.flywaydb', 'flyway-core').versionRef('flywaydbVersion')
            library('flywaydbPostgres', 'org.flywaydb', 'flyway-database-postgresql').versionRef('flywaydbVersion')
            library('hikariCp', 'com.zaxxer', 'HikariCP').versionRef('hikariCpVersion')
            library('postgresql', 'org.postgresql', 'postgresql').versionRef('postgresqlVersion')
            library('h2database', 'com.h2database', 'h2').versionRef('h2Version')
            library('auth0JavaJwt', 'com.auth0', 'java-jwt').versionRef('auth0JavaJwtVersion')
            library('defendevCommonJdk', 'org.defendev', 'common-jdk').versionRef('defendevCommonJdkVersion')

            /*
             * The Maven Central coordinates of 'io.spring.dependency-management' are:
             *
             * <dependency>
             *     <groupId>io.spring.gradle</groupId>
             *     <artifactId>dependency-management-plugin</artifactId>
             *     <version>1.1.7</version>
             * </dependency>
             *
             */
            plugin('springDependencyManagementPlugin', 'io.spring.dependency-management')
                .versionRef('springDependencyManagementPluginVersion')
            plugin('springBootPlugin', 'org.springframework.boot')
                    .versionRef('springBootVersion')
        }
    }
}

rootProject.name = 'flowable-demo'

include '001-console-app'
project(':001-console-app').name = 'console-app'

include '002-core-spring'
project(':002-core-spring').name = 'core-spring'

include '003-junit-extension-context'
project(':003-junit-extension-context').name = 'junit-extension-context'

include '004-testcontainers-postgres-flyway'
project(':004-testcontainers-postgres-flyway').name = 'testcontainers-postgres-flyway'

include '005-spring-authz-server'
project(':005-spring-authz-server').name = 'spring-authz-server'

include '006-hibernate-envers'
project(':006-hibernate-envers').name = 'hibernate-envers'




include '008-enable-annotation'
project(':008-enable-annotation').name = 'enable-annotation'

include '009-spring-gateway-reactive'
project(':009-spring-gateway-reactive').name = 'spring-gateway-reactive'

include '010-spring-resource-server'
project(':010-spring-resource-server').name = 'spring-resource-server'




include '012-microsoft-graph-msal'
project(':012-microsoft-graph-msal').name = 'microsoft-graph-msal'

include '013-microsoft-graph-sdk'
project(':013-microsoft-graph-sdk').name = 'microsoft-graph-sdk'

include '014-rest-assured'
project(':014-rest-assured').name = 'rest-assured'

include '015-nimbus-jose'
project(':015-nimbus-jose').name = 'nimbus-jose'
